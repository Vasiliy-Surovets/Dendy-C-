#include <TXlib.h>

class Map
{
    public:
    Map();
    ~Map();
    void sprite(HDC a);

    void draw();
    int checkin(int g);
    int burst(int a);
    void smena();
    void captertwo();
    void capterthree();
    void capterfour();
    void capterfive();
    void next();

    private:
    HDC text;
    int tip, k, whSrc, urov = 2, onoff = 1;
    int block[18][18];
};

Map::Map()
{
    k = 50;
    whSrc = 27;
    int a[18][18]{
    {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
    {3, 2, 1, 1, 2, 1, 5, 2, 5, 1, 2, 1, 1, 2, 1, 1, 2, 3},
    {3, 2, 5, 1, 2, 1, 1, 2, 1, 5, 2, 1, 5, 2, 1, 5, 2, 3},
    {3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
    {3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
    {3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
    {3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
    {3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
    {3, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3},
    {3, 1, 1, 1, 1, 1, 1, 2, 3, 2, 1, 1, 1, 1, 1, 1, 1, 3},
    {3, 1, 1, 1, 1, 1, 2, 3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 3},
    {3, 1, 1, 1, 1, 1, 1, 2, 3, 2, 1, 1, 1, 1, 1, 1, 1, 3},
    {3, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3},
    {3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
    {3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
    {3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
    {3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
    {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3}
    };
    for (int j = 0; j < 18; j++)
    {
        for (int i = 0; i < 18; i++)
        {
            block[i][j] = a[j][i];
        }
    }
}

Map::~Map()
{
    cout << "Map OK" << std::endl;
}

void Map::sprite(HDC a)
    {
        text = a;
    }


void Map::draw()
    {
        for (int j = 0; j < 18; j++)
            {
                for (int i = 0; i < 18; i++)
                    {
                        if (block[i][j] == 3)
                            {
                                Win32::TransparentBlt (txDC(), i * k
                                , j * k, k, k, text, 153, 3, whSrc, whSrc, TX_BLACK);
                            }
                        else if (block[i][j] == 2)
                            {
                                Win32::TransparentBlt (txDC(), i * k
                                , j * k, k, k, text, 123, 3, whSrc, whSrc, TX_BLACK);
                            }
                        else if (block[i][j] == 4)
                            {
                                Win32::TransparentBlt (txDC(), i * k
                                , j * k, k, k, text, 213, 3, whSrc, whSrc, TX_BLACK);
                            }
                        else if (block[i][j] == 5)
                            {
                                Win32::TransparentBlt (txDC(), i * k
                                , j * k, k, k, text, 153, 33, whSrc, whSrc, TX_BLACK);
                            }
                        else if (block[i][j] == 6)
                            {
                                Win32::TransparentBlt (txDC(), i * k
                                , j * k, k, k, text, 183, 33, whSrc, whSrc, TX_BLACK);
                            }
                        else
                            {
                                Win32::TransparentBlt (txDC(), i * k
                                , j * k, k, k, text, 183, 3, whSrc, whSrc, TX_BLACK);
                            }
                    }
            }
    }

int Map::checkin(int g)
    {
        int i, j, c;
        i = g / 100;
        j = g - (g / 100) * 100;
        c = block[i][j];
        return c;
    }

int Map::burst(int a)
    {
        int i, j, c;
        i = a / 100;
        j = a - (a / 100) * 100;

        c = block[i][j];



        if (c == 2)
        {
            block[i][j] = 4;
        }
        if (c == 5)
        {
            block[i][j] = 6;
        }
        return c;

    }

void Map::smena()
    {
            if (urov == 5)
            {
                urov++;
                capterfive();
            }
            else if (urov == 4)
            {
                urov++;
                capterfour();
            }
            else if (urov == 3)
            {
                urov++;
                capterthree();
            }
            else if (urov == 2)
            {
                urov++;
                captertwo();
            }
            else if (urov == 6)
            {

            }
    }

void Map::captertwo()
    {
        int a[18][18]{
        {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
        {3, 5, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
        {3, 1, 3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
        {3, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
        {3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
        {3, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
        {3, 1, 3, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
        {3, 2, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3},
        {3, 2, 3, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3, 1, 1, 3},
        {3, 2, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3},
        {3, 2, 1, 3, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 3},
        {3, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3},
        {3, 3, 1, 3, 2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 3},
        {3, 5, 1, 2, 2, 2, 2, 2, 2, 1, 2, 3, 1, 1, 1, 1, 1, 3},
        {3, 3, 1, 3, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 3},
        {3, 3, 2, 3, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 3, 2, 3, 3},
        {3, 3, 1, 3, 1, 5, 1, 5, 1, 5, 2, 3, 1, 1, 3, 1, 3, 3},
        {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3}
        };
        for (int j = 0; j < 18; j++)
        {
            for (int i = 0; i < 18; i++)
            {
                block[i][j] = a[j][i];
            }
        }
        onoff = 0;
    }

void Map::capterthree()
    {
        int a[18][18]{
        {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
        {3, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 1, 3},
        {3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3},
        {3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3},
        {3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3},
        {3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
        {3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 3},
        {3, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
        {3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3},
        {3, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 3},
        {3, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3},
        {3, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 3},
        {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3},
        {3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3},
        {3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3},
        {3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3},
        {3, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3},
        {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3}
        };
        for (int j = 0; j < 18; j++)
        {
            for (int i = 0; i < 18; i++)
            {
                block[i][j] = a[j][i];
            }
        }
        onoff = 0;
    }

void Map::capterfour()
    {
        int a[18][18]{
        {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
        {3, 2, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 3},
        {3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3},
        {3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3},
        {3, 3, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3},
        {3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 3},
        {3, 3, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3},
        {3, 1, 1, 1, 1, 1, 1, 2, 3, 3, 2, 1, 1, 1, 1, 1, 1, 3},
        {3, 1, 1, 1, 1, 1, 1, 3, 2, 2, 3, 1, 1, 1, 1, 1, 5, 3},
        {3, 1, 1, 1, 1, 1, 1, 3, 2, 2, 3, 1, 1, 1, 1, 1, 1, 3},
        {3, 1, 1, 1, 1, 1, 1, 2, 3, 3, 2, 1, 1, 1, 1, 1, 5, 3},
        {3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3},
        {3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 3},
        {3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3},
        {3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3},
        {3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3},
        {3, 2, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 2, 3},
        {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3}
        };
        for (int j = 0; j < 18; j++)
        {
            for (int i = 0; i < 18; i++)
            {
                block[i][j] = a[j][i];
            }
        }
        onoff = 0;
    }

void Map::capterfive()
    {
        int a[18][18]{
        {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
        {3, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 3},
        {3, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 3},
        {3, 1, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 3, 4, 3, 1, 1, 3},
        {3, 1, 1, 1, 3, 1, 1, 1, 3, 5, 3, 1, 1, 3, 1, 1, 1, 3},
        {3, 1, 1, 3, 4, 3, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3},
        {3, 1, 1, 1, 3, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 3},
        {3, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3},
        {3, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 3},
        {3, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
        {3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
        {3, 1, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3},
        {3, 1, 1, 1, 1, 1, 3, 4, 3, 1, 1, 3, 1, 1, 1, 1, 1, 3},
        {3, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 2, 3, 1, 1, 1, 1, 3},
        {3, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 2, 3, 1, 1, 1, 1, 3},
        {3, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3},
        {3, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 5, 5, 5, 5, 5, 3},
        {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3}
        };
        for (int j = 0; j < 18; j++)
        {
            for (int i = 0; i < 18; i++)
            {
                block[i][j] = a[j][i];
            }
        }
        onoff = 0;
    }
void Map::next()
    {

        onoff = 1;
        urov++;

    }
